{"ast":null,"code":"const newGameButton = document.getElementById(\"newGame\");\nlet gameId;\nlet playerId;\nlet board;\nlet winner;\nexport function getGameId() {\n  return gameId;\n}\nexport function getBoard() {\n  return board;\n}\nexport function getWinner() {\n  return winner;\n}\nexport async function createGame() {\n  fetch(`http://localhost:8080/create`).then(response => response.json()).then(data => {\n    gameId = data.idPartida;\n    console.log(gameId);\n    playerId = data.idPlayerX;\n    board = data.board;\n    console.log(board);\n    winner = data.ganador;\n    console.log(winner);\n  }).catch(error => {\n    console.error(\"Error:\", error);\n  });\n}\nexport async function joinGame() {\n  gameId = document.getElementById(\"gameId\").value;\n  fetch(`http://localhost:8080/join/${gameId}`).then(response => response.json()).then(data => {\n    gameId = data.idPartida;\n    console.log(gameId);\n    playerId = data.idPlayerX;\n    board = data.board;\n    console.log(board);\n    winner = data.ganador;\n    console.log(winner);\n  }).catch(error => {\n    console.error(\"Error:\", error);\n  });\n}\nexport function turno(casilla) {\n  fetch(`http://localhost:8080/turno/${gameId}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      casilla,\n      playerId\n    })\n  }).then(response => response.json()).then(data => {\n    if (data.success) {\n      board = data.board;\n      console.log(board);\n      winner = data.ganador;\n      console.log(winner);\n      return board;\n    } else {\n      console.error(\"Turno no válido:\", data.message);\n    }\n  }).catch(error => {\n    console.error(\"Error:\", error);\n  });\n}\nexport async function reloadBoard() {\n  while (!gameId) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  }\n  fetch(`http://localhost:8080/actualizar/${gameId}`).then(response => response.json()).then(data => {\n    if (data.success) {\n      board = data.board;\n      console.log(board);\n      winner = data.ganador;\n      console.log(winner);\n    }\n  }).catch(error => console.error(\"Error:\", error));\n}","map":{"version":3,"names":["newGameButton","document","getElementById","gameId","playerId","board","winner","getGameId","getBoard","getWinner","createGame","fetch","then","response","json","data","idPartida","console","log","idPlayerX","ganador","catch","error","joinGame","value","turno","casilla","method","headers","body","JSON","stringify","success","message","reloadBoard","Promise","resolve","setTimeout"],"sources":["C:/Users/purru/OneDrive - Universidad Pontificia Comillas/Documentos/3_Tercero/PAT/Repositorios/practica4/Ejercicio Tres en React-ayas/src/Api.js"],"sourcesContent":["const newGameButton = document.getElementById(\"newGame\");\r\n\r\nlet gameId;\r\nlet playerId;\r\nlet board;\r\nlet winner;\r\n\r\nexport function getGameId(){\r\n    return gameId;\r\n}\r\n\r\nexport function getBoard(){\r\n    return board;\r\n}\r\n\r\nexport function getWinner(){\r\n    return winner;\r\n}\r\n\r\nexport async function createGame(){\r\n    fetch(`http://localhost:8080/create`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        gameId = data.idPartida;\r\n        console.log(gameId)\r\n        playerId = data.idPlayerX;\r\n        board = data.board;\r\n        console.log(board);\r\n        winner = data.ganador;\r\n        console.log(winner);\r\n    })\r\n    .catch(error => {\r\n        console.error(\"Error:\", error);\r\n    });\r\n}\r\n\r\nexport async function joinGame(){\r\n    gameId = document.getElementById(\"gameId\").value;\r\n    fetch(`http://localhost:8080/join/${gameId}`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        gameId = data.idPartida;\r\n        console.log(gameId)\r\n        playerId = data.idPlayerX;\r\n        board = data.board;\r\n        console.log(board);\r\n        winner = data.ganador;\r\n        console.log(winner);\r\n    })\r\n    .catch(error => {\r\n        console.error(\"Error:\", error);\r\n    });\r\n}\r\n\r\nexport function turno(casilla) {\r\n    fetch(`http://localhost:8080/turno/${gameId}`, \r\n        {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ casilla, playerId })\r\n        }\r\n    )\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        if (data.success) {\r\n            board = data.board;\r\n            console.log(board);\r\n            winner = data.ganador;\r\n            console.log(winner);\r\n            return board;\r\n        } else {\r\n            console.error(\"Turno no válido:\", data.message);\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.error(\"Error:\", error);\r\n    });\r\n}\r\n\r\nexport async function reloadBoard() {\r\n    while (!gameId) {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n    }\r\n    fetch(`http://localhost:8080/actualizar/${gameId}`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        if (data.success) {\r\n            board = data.board;\r\n            console.log(board);\r\n            winner = data.ganador;\r\n            console.log(winner);\r\n        }\r\n    }).catch(error => console.error(\"Error:\", error));\r\n}"],"mappings":"AAAA,MAAMA,aAAa,GAAGC,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC;AAExD,IAAIC,MAAM;AACV,IAAIC,QAAQ;AACZ,IAAIC,KAAK;AACT,IAAIC,MAAM;AAEV,OAAO,SAASC,SAASA,CAAA,EAAE;EACvB,OAAOJ,MAAM;AACjB;AAEA,OAAO,SAASK,QAAQA,CAAA,EAAE;EACtB,OAAOH,KAAK;AAChB;AAEA,OAAO,SAASI,SAASA,CAAA,EAAE;EACvB,OAAOH,MAAM;AACjB;AAEA,OAAO,eAAeI,UAAUA,CAAA,EAAE;EAC9BC,KAAK,CAAC,8BAA8B,CAAC,CACpCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACVZ,MAAM,GAAGY,IAAI,CAACC,SAAS;IACvBC,OAAO,CAACC,GAAG,CAACf,MAAM,CAAC;IACnBC,QAAQ,GAAGW,IAAI,CAACI,SAAS;IACzBd,KAAK,GAAGU,IAAI,CAACV,KAAK;IAClBY,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;IAClBC,MAAM,GAAGS,IAAI,CAACK,OAAO;IACrBH,OAAO,CAACC,GAAG,CAACZ,MAAM,CAAC;EACvB,CAAC,CAAC,CACDe,KAAK,CAACC,KAAK,IAAI;IACZL,OAAO,CAACK,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC,CAAC,CAAC;AACN;AAEA,OAAO,eAAeC,QAAQA,CAAA,EAAE;EAC5BpB,MAAM,GAAGF,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAACsB,KAAK;EAChDb,KAAK,CAAC,8BAA8BR,MAAM,EAAE,CAAC,CAC5CS,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACVZ,MAAM,GAAGY,IAAI,CAACC,SAAS;IACvBC,OAAO,CAACC,GAAG,CAACf,MAAM,CAAC;IACnBC,QAAQ,GAAGW,IAAI,CAACI,SAAS;IACzBd,KAAK,GAAGU,IAAI,CAACV,KAAK;IAClBY,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;IAClBC,MAAM,GAAGS,IAAI,CAACK,OAAO;IACrBH,OAAO,CAACC,GAAG,CAACZ,MAAM,CAAC;EACvB,CAAC,CAAC,CACDe,KAAK,CAACC,KAAK,IAAI;IACZL,OAAO,CAACK,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC,CAAC,CAAC;AACN;AAEA,OAAO,SAASG,KAAKA,CAACC,OAAO,EAAE;EAC3Bf,KAAK,CAAC,+BAA+BR,MAAM,EAAE,EACzC;IACIwB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEL,OAAO;MAAEtB;IAAS,CAAC;EAC9C,CACJ,CAAC,CACAQ,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACV,IAAIA,IAAI,CAACiB,OAAO,EAAE;MACd3B,KAAK,GAAGU,IAAI,CAACV,KAAK;MAClBY,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;MAClBC,MAAM,GAAGS,IAAI,CAACK,OAAO;MACrBH,OAAO,CAACC,GAAG,CAACZ,MAAM,CAAC;MACnB,OAAOD,KAAK;IAChB,CAAC,MAAM;MACHY,OAAO,CAACK,KAAK,CAAC,kBAAkB,EAAEP,IAAI,CAACkB,OAAO,CAAC;IACnD;EACJ,CAAC,CAAC,CACDZ,KAAK,CAACC,KAAK,IAAI;IACZL,OAAO,CAACK,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC,CAAC,CAAC;AACN;AAEA,OAAO,eAAeY,WAAWA,CAAA,EAAG;EAChC,OAAO,CAAC/B,MAAM,EAAE;IACZ,MAAM,IAAIgC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;EAC3D;EACAzB,KAAK,CAAC,oCAAoCR,MAAM,EAAE,CAAC,CAClDS,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACV,IAAIA,IAAI,CAACiB,OAAO,EAAE;MACd3B,KAAK,GAAGU,IAAI,CAACV,KAAK;MAClBY,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;MAClBC,MAAM,GAAGS,IAAI,CAACK,OAAO;MACrBH,OAAO,CAACC,GAAG,CAACZ,MAAM,CAAC;IACvB;EACJ,CAAC,CAAC,CAACe,KAAK,CAACC,KAAK,IAAIL,OAAO,CAACK,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}