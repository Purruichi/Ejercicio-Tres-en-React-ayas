{"ast":null,"code":"let gameId;\nlet playerId;\nlet otherPlayerId;\nlet board;\nlet winner;\nexport function getGameId() {\n  return gameId;\n}\nexport function getBoard() {\n  return board;\n}\nexport function getWinner() {\n  return winner;\n}\nexport async function createGame() {\n  fetch(`http://localhost:8080/create`).then(response => response.json()).then(data => {\n    gameId = data.idPartida;\n    playerId = data.idPlayerX;\n    board = data.board;\n    winner = data.ganador;\n    outputGameId.textContent = `Game ID: ${gameId}`;\n    outputPlayerXId.textContent = `Player X ID: ${playerId}`; // Actualizado\n    outputBoard.textContent = `Board: ${JSON.stringify(board)}`;\n    outputWinner.textContent = `Winner: ${winner}`;\n  }).catch(error => {\n    outputError.textContent = `Error: ${error}`;\n  });\n}\nexport async function joinGame() {\n  gameId = document.getElementById(\"gameId\").value;\n  fetch(`http://localhost:8080/join/${gameId}`).then(response => response.json()).then(data => {\n    gameId = data.idPartida;\n    otherPlayerId = data.idPlayerO;\n    board = data.board;\n    winner = data.ganador;\n    outputGameId.textContent = `Game ID: ${gameId}`;\n    outputPlayerOId.textContent = `Player O ID: ${otherPlayerId}`; // Nuevo\n    outputBoard.textContent = `Board: ${JSON.stringify(board)}`;\n    outputWinner.textContent = `Winner: ${winner}`;\n  }).catch(error => {\n    outputError.textContent = `Error: ${error}`;\n  });\n}\nexport function turno(casilla) {\n  console.log(turno);\n  console.log(playerId);\n  fetch(`http://localhost:8080/turno/${gameId}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      casilla,\n      idJugador: playerId\n    })\n  }).then(response => response.json()).then(data => {\n    turno++;\n    board = data.board;\n    winner = data.ganador;\n    outputBoard.textContent = `Board: ${JSON.stringify(board)}`;\n    outputWinner.textContent = `Winner: ${winner}`;\n  }).catch(error => {\n    outputError.textContent = `Error: ${error}`;\n  });\n}\nexport async function reloadBoard() {\n  while (!gameId) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  }\n  console.log(gameId);\n  fetch(`http://localhost:8080/actualizar/${gameId}`).then(response => response.json()).then(data => {\n    if (data.success) {\n      board = data.board;\n      console.log(board);\n      winner = data.ganador;\n      console.log(winner);\n    } else {\n      console.error(\"Error al actualizar:\", data.message);\n    }\n  }).catch(error => console.error(\"Error:\", error));\n}","map":{"version":3,"names":["gameId","playerId","otherPlayerId","board","winner","getGameId","getBoard","getWinner","createGame","fetch","then","response","json","data","idPartida","idPlayerX","ganador","outputGameId","textContent","outputPlayerXId","outputBoard","JSON","stringify","outputWinner","catch","error","outputError","joinGame","document","getElementById","value","idPlayerO","outputPlayerOId","turno","casilla","console","log","method","headers","body","idJugador","reloadBoard","Promise","resolve","setTimeout","success","message"],"sources":["C:/Users/purru/OneDrive - Universidad Pontificia Comillas/Documentos/3_Tercero/PAT/Repositorios/practica4/Ejercicio Tres en React-ayas/src/Api.js"],"sourcesContent":["let gameId;\r\nlet playerId;\r\nlet otherPlayerId;\r\nlet board;\r\nlet winner;\r\n\r\nexport function getGameId(){\r\n    return gameId;\r\n}\r\n\r\nexport function getBoard(){\r\n    return board;\r\n}\r\n\r\nexport function getWinner(){\r\n    return winner;\r\n}\r\n\r\nexport async function createGame(){\r\n    fetch(`http://localhost:8080/create`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        gameId = data.idPartida;\r\n        playerId = data.idPlayerX;\r\n        board = data.board;\r\n        winner = data.ganador;\r\n\r\n        outputGameId.textContent = `Game ID: ${gameId}`;\r\n        outputPlayerXId.textContent = `Player X ID: ${playerId}`; // Actualizado\r\n        outputBoard.textContent = `Board: ${JSON.stringify(board)}`;\r\n        outputWinner.textContent = `Winner: ${winner}`;\r\n    })\r\n    .catch(error => {\r\n        outputError.textContent = `Error: ${error}`;\r\n    });\r\n}\r\n\r\nexport async function joinGame(){\r\n    gameId = document.getElementById(\"gameId\").value;\r\n    fetch(`http://localhost:8080/join/${gameId}`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        gameId = data.idPartida;\r\n        otherPlayerId = data.idPlayerO;\r\n        board = data.board;\r\n        winner = data.ganador;\r\n\r\n        outputGameId.textContent = `Game ID: ${gameId}`;\r\n        outputPlayerOId.textContent = `Player O ID: ${otherPlayerId}`; // Nuevo\r\n        outputBoard.textContent = `Board: ${JSON.stringify(board)}`;\r\n        outputWinner.textContent = `Winner: ${winner}`;\r\n    })\r\n    .catch(error => {\r\n        outputError.textContent = `Error: ${error}`;\r\n    });\r\n}\r\n\r\nexport function turno(casilla) {\r\n    console.log(turno);\r\n    console.log(playerId);\r\n    fetch(`http://localhost:8080/turno/${gameId}`, \r\n        {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ casilla, idJugador: playerId })\r\n        })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        turno++;\r\n        board = data.board;\r\n        winner = data.ganador;\r\n\r\n        outputBoard.textContent = `Board: ${JSON.stringify(board)}`;\r\n        outputWinner.textContent = `Winner: ${winner}`;\r\n    })\r\n    .catch(error => {\r\n        outputError.textContent = `Error: ${error}`;\r\n    });\r\n}\r\n\r\nexport async function reloadBoard() {\r\n    while (!gameId) {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n    }\r\n    console.log(gameId);\r\n    fetch(`http://localhost:8080/actualizar/${gameId}`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        if (data.success) {\r\n            board = data.board;\r\n            console.log(board);\r\n            winner = data.ganador;\r\n            console.log(winner);\r\n        } else {\r\n            console.error(\"Error al actualizar:\", data.message);\r\n        }\r\n    }).catch(error => console.error(\"Error:\", error));\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}